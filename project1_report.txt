Github Repo Link:https://github.com/UCI-Chenli-teaching/cs222p-winter20-team-1.git
Amit Somani


2. Internal Record Format

>> Record format design is as follows :
Each record has 2 parts :
Part 1 : Slots to store offset values for each field in the record. The number of slots are equal to the size of recordDescriptor.size().
The the field's where the value is null, will have the offset pointing to NULL_POINT value defined in the header file.

E.g. lets say we have a record with 3 fields -> Name : Amit, Age : 25, height : Null.
Field offset Slots would look like : | 12 | 20 | NULL_POINT |

Here the first slot has value equal to 12  which is recordDescriptor.size()*sizeof(int), and the start of the first field (which is varchar in this case).
The size of first varcharfield is : sizeof(int) + number of character in the filed (4 in the case for "Amit") = 8.
The second field is an integer and starts at 12 + 8 = 20 byte offset.
Since the third field is NULL, the slot points to NULL_POINT value.

Part 2 : Right after the field offset table, we store the field values in the same format they are passed but without the nullBytes.

Overall record format looks like this : This assumes that the below record is first record in the file.

               12<----varcharlen + sizeof(int)--->20<--sizeof(int)--->24<--sizeof(float)-->START OF NEXT RECORD   
| 12 | 20 | 24 |       varchar field value        |  age field value  | height field value | ...

>> How to access field in O(1)?
For each given RID, we get the offset (start of record ) from page directory using the slotnumber and pagenumber values for the RID.
Once we get the record offset, we use the attribute name to find the index of attribute in recordDescriptor vector.
lets say for the above example, we need to find the value of field "Age", the index of which is 1 in recordDescriptor vector.

To access the fields data : we find the field offset value from = record_offset + 1*sizeof(int)
If the field offset value points to NULL_POINT, then the field value is null, else we jump to the offset pointed by field offset and read the bytes according to the type of field.
In this we will read sizeof(int) bytes for "Age" field.

Since we are not going through each record and its field, this method allows us to get the required field access in O(1) time.



- Describe how you store a VarChar field.
>> Varchar is stored in the same format as it is passed in the data. i.e. varcharlen (integer value denoting the length of field), followed by the actual characters.


3. Page Format
- -------------------------------------------------------------
 |<Record 1><Record 2><Record 3> ...<Record N>|               |
 |                                            ^-> R           |
 |                                                            |
 |                                                            |
 |                                                            |
 |                                                            |
 |                                                            |
 |                                                            |
 |                                                            |
 |                                                            |
 | D  ------------------------------------------------------- |
 | -> | ...| ... |Updated_flag Record_size Record_offset|R|D | 
 -------------------------------------------------------------|

R : Pointer to end of last record in the file.
D : Pointer to last slot in the Page directory.
Page Directory : First 2 slots contains D and R pointers.
                 After the first 2 slots, each slots has size equal to that of 3 integers.
                 1st integer contains offset for record with given RID.
                 2nd integer contains the size of the record with given RID.
                 3rd integer contains the flag to check if the record has been updated. The updated flag will only be set when the record has been moved to other page after updation.

Free space in the page can be calculated  = D - R.

4. Page Management
- Using the above page format, for each page we can check the free space using formula = D - R.
- If the current page (last page) has "enough" space to hold the record to be inserted, then we use it.
- If the current page is full, we iterated over all the pages from page number 0 till last_page - 1, and check the free space in each page. For any page, if we have enough space to hold the record, we use that page.
- If none of the pages has enough free space for the record, we append a new page and add the record to it.

- Show your hidden page format design if applicable
>> Hidden Page only holds 3 counter values
   - readPageCounter
   - writePageCounter
   - appendPageCounter
   - numPages


5. Implementation Detail
- Whenever a new page is appended for inserting a record, we initialize the page directory with D = PAGE_SIZE and R = 0.
- The MIN_RECORD_SIZE is kept as 8 bytes, if in case the record size to be stored in file is less the min size, we still allocate the minimum bytes reqired to it.



6. Other (optional)
- Freely use this section to tell us about things that are related to the project 1, but not related to the other sections (optional)


